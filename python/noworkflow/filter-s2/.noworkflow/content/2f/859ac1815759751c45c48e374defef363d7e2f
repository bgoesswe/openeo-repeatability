def extract_sentinel_2_data():
    ''' Extracts data that is specified by PARAMS '''

    print("-> Start data extraction...")

    # Create Out folder
    TEMP_FOLDERS["extracted"] = create_folder(OUT_FOLDER, "02_extracted")

    for day in listdir(TEMP_FOLDERS["unzipped"]):

        # Create Out folder for each day inside "extracted" folder
        folder_day = create_folder(TEMP_FOLDERS["extracted"], day)

        # Iterate over each day folder in unzipped (observation: path to archive on eodc storage)
        for observation in listdir("{0}/{1}".format(TEMP_FOLDERS["unzipped"], day)):
            for granule in listdir("{0}/{1}/{2}/GRANULE".format(TEMP_FOLDERS["unzipped"], day, observation)):

                dst_granule = granule
                # Check for old S2 naming convention
                if granule.startswith("S"):
                    dst_granule = build_new_granule_name_from_old(granule)

                # Create a folder for each granule
                folder_granule = create_folder(folder_day, dst_granule)

                img_path = "{0}/{1}/{2}/GRANULE/{3}/IMG_DATA".format(TEMP_FOLDERS["unzipped"], day, observation, granule)
                for img_name in listdir(img_path):
                    file_band = img_name.split("_")[-1].split(".")[0]

                    if not "filter_bands" in ARGS or file_band in PARAMS["filter_bands"]["bands"]:

                        dst_img_name = img_name
                        # Check for old S2 naming convention
                        if img_name.startswith("S"):
                            dst_img_name = build_new_img_name_from_old(img_name)

                        src = "{0}/{1}".format(img_path, img_name)
                        dst = "{0}/{1}".format(folder_granule, dst_img_name)
                        copyfile(src, dst)

                        print(" - Extracted {0}".format(dst_img_name))

    print("-> Finished data extraction.")